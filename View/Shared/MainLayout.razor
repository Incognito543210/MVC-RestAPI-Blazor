@inherits LayoutComponentBase
@inject NavigationManager NavMan

<PageTitle>View</PageTitle>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="this">
    <div class="page">
        <div id="container">
            <div id="topbar">
                <div>
                    <b style="font-size: 1.17rem; font-weight: bolder; color: white">Książka kucharska</b>
                </div>
                <div id="buttons">
                    <button class="openlogin_btn" @onclick="OpenLogin"><i class="oi oi-person" aria-hidden="true"></i></button>

                    @*@if (loggedIn)
                    {
                    <button class="account_btn" @onclick="onClickAccount"></button>
                    }
                    else
                    {
                    <button class="login_btn" @onclick="onClickLogin"></button>
                    }*@
                </div>
            </div>

            <main>
                <div id="nav">
                    <NavMenu />
                </div>

                <div id="content">
                    <div id="article">
                        @Body
                    </div>
                </div>
            </main>
        </div>
    </div>
</CascadingValue>

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Logowanie</h5>
                <button class="btn btn-danger" @onclick="Close">❌</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@user" OnValidSubmit="@LogIn">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <MudTextField @bind-Value="user.Email" Label="Adres e-mail" For="@(() => user.Email)"></MudTextField>
                    </div>
                    <div class="mb-3">
                        <MudTextField @bind-Value="user.Password" Label="Hasło" For="@(() => user.Password)" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" />
                    </div>
                    <div class="mb-3" id="bottom">
                        <a>Nie masz konta?</a>
                        <button class="btn-link" type="button" @onclick="SignUp">Zarejestruj się</button>
                    </div>
                    <div class="modal-footer">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="btn1">Zaloguj się</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="Close" Class="btn2">Anuluj</MudButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .btn1 {
        background: rgba( 22, 166, 185 );
        font-size: 1.17em;
        color: white;
        margin-right: 5px;
    }

    .btn2 {
        background: gray;
        font-size: 1.17em;
        color: white;
    }

        .btn1:hover, .btn2:hover {
            background: rgba(227, 225, 222);
        }
</style>


@code {
    private bool show, display, loggedIn;

    UserDto user = new();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    //public string? GetUserName()
    //{
    //    return loggedIn ? user : null;
    //}

    public async Task OpenLogin()
    {
        display = true;
        await Task.Delay(100);
        show = true;
    }

    private async Task Close()
    {
        show = false;
        await Task.Delay(500);
        display = false;
    }

    private async Task ClickLogin()
    {
        
    }

    void ButtonTestClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task SignUp()
    {
        show = false;
        await Task.Delay(500);
        display = false;
        NavMan.NavigateTo("/signup");
    }

    private async Task LogIn()
    {
        show = false;
        await Task.Delay(500);
        display = false;
        NavMan.NavigateTo("/signup");
    }
}
