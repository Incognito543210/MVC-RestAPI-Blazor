@if (errorMessageIngrList != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessageIngrList
    </div>
}
@if (errorMessageTagList != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessageTagList
    </div>
}

<div>
    <EditForm Model="@Recipe" OnValidSubmit="@SubmitRecipe">
        <DataAnnotationsValidator />
        <MudStack Row="true">
            <MudTextField @bind-Value="Recipe.Title" Label="Nazwa" For="@(() => Recipe.Title)"></MudTextField>
            <MudNumericField @bind-Value="Recipe.Portions" Label="Liczba porcji" Step="1" Min="1" For="@(() => Recipe.Portions)"/>
            <MudTimePicker Label="Czas przygotowania" @bind-Time="Recipe.PrepTimeAsTimeSpan" For="@(() => Recipe.PrepTimeAsTimeSpan)"/>
            <MudSelect T="int" Label="Stopień trudności" @bind-Value="Recipe.Difficulty" AnchorOrigin="Origin.BottomCenter" For="@(() => Recipe.Difficulty)">
                <MudSelectItem T="int" Value="1" />
                <MudSelectItem T="int" Value="2" />
                <MudSelectItem T="int" Value="3" />
                <MudSelectItem T="int" Value="4" />
                <MudSelectItem T="int" Value="5" />
            </MudSelect>
        </MudStack>
        <p><MudTextField T="string" @bind-Value="Recipe.Content" Label="Opis przygotowania" Text="@Recipe.Content" Lines="10" For="@(() => Recipe.Content)" /></p>
        <p><MudButton class="btn1" ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowForward" FullWidth="true">Prześlij przepis</MudButton></p>
    </EditForm>
    <br /><br /><br />
    <MudStack Row="true">
        <EditForm Model="@ingredient" OnValidSubmit="@AddIngredientToList">
            <DataAnnotationsValidator />
            <MudStack Row="true">
                <MudTextField @bind-Value="ingredient.Name" Label="Składnik" For="@(() => ingredient.Name)"></MudTextField>
                <MudTextField @bind-Value="ingredient.Quantity" Label="Ilość" For="@(() => ingredient.Quantity)"></MudTextField>
                <MudButton class="btn1" ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowForward">Dodaj składnik</MudButton>
            </MudStack>
        </EditForm>
        <EditForm Model="@tag" OnValidSubmit="@AddTagToList">
            <DataAnnotationsValidator />
            <MudStack Row="true">
                <MudSelect T="string" Label="Lista tagów" AnchorOrigin="Origin.BottomCenter" OpenIcon="@Icons.Material.Filled.Bookmarks" @bind-Value="tag.Name" Style="width: 200px;">
                    @foreach (var item in Tags)
                    {
                        <MudSelectItem Value="@item.Name">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudButton class="btn1" ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowForward">Dodaj tag</MudButton>
            </MudStack>
        </EditForm><br />
    </MudStack><br />


    @if (Recipe.Ingridients.Count == 0)
    {
        <p>
            Ten przepis nie ma składników
        </p>
    }
    else
    {
        <div id="div-table">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th colspan="1" style="text-align: left;">Składnik</th>
                        <th colspan="1" style="text-align: center;">Ilość</th>
                        <th colspan="1" style="text-align: right;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Recipe.Ingridients)
                    {
                        <tr>
                            <td colspan="1" style="text-align: left;">
                                @item.Name
                            </td>
                            <td colspan="1" style="text-align: center;">
                                @item.Quantity
                            </td>
                            <td colspan="1" style="text-align: right;">
                                <button class="btn btn-primary" @onclick="@(() => UpdateIngredientInList(item))">📝</button>
                                <button class="btn btn-danger" @onclick="@(() => DeleteIngredientFromList(item))">❌</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

@if (Recipe.Tags.Count == 0)
    {
        <p>
            Ten przepis nie ma tagów
        </p>
    }
    else
    {
        <div id="div-table">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th colspan="1" style="text-align: left;">Tag</th>
                        <th colspan="1" style="text-align: right;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Recipe.Tags)
                    {
                        <tr>
                            <td colspan="1" style="text-align: left;">
                                @item.Name
                            </td>
                            <td colspan="1" style="text-align: right;">
                                <button class="btn btn-danger" @onclick="@(() => DeleteTagFromList(item))">❌</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<style>
    .btn1 {
        background: rgba( 22, 166, 185 );
        padding: 8px;
        float: right;
        border-radius: 8px;
        font-size: 1.17em;
        color: white;
    }

        .btn1:hover {
            background-color: rgba(227, 225, 222);
        }

    #div-table {
        width: auto;
        display: flex;
        justify-content: center;
    }

    table {
        width: 100%;
        max-width: 100%;
    }
</style>

@code {
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public RecipeAdapter Recipe { get; set; }

    [Parameter]
    public List<TagDto> Tags { get; set; }

    string? errorMessageIngrList;
    string? errorMessageTagList;

    IngridientDto ingredient = new();
    TagDto tag = new();

    TimeSpan DateTimeToTimeSpan(DateTime? ts)
    {
        if (!ts.HasValue) return TimeSpan.Zero;
        else return new TimeSpan(0, ts.Value.Hour, ts.Value.Minute, ts.Value.Second, ts.Value.Millisecond);
    }

    void AddIngredientToList()
    {
        bool IsInList = false;
        foreach(var ingr in Recipe.Ingridients)
        {
            if(ingr.Name == ingredient.Name)
            {
                IsInList = true;
            }
        }
        if(!IsInList)
        {
            Recipe.Ingridients.Add(ingredient);
            ingredient = new();
        }
    }

    void AddTagToList()
    {
        bool IsInList = false;
        foreach (var item in Recipe.Tags)
        {
            if (item.Name == tag.Name)
            {
                IsInList = true;
            }
        }
        if(!IsInList)
        {
            Recipe.Tags.Add(tag);
        }
        tag = new();
    }

    void UpdateIngredientInList(IngridientDto ingredient)
    {
        DeleteIngredientFromList(ingredient);
        this.ingredient = ingredient;
    }

    void DeleteIngredientFromList(IngridientDto ingredient)
    {
        Recipe.Ingridients.Remove(ingredient);
    }

    void DeleteTagFromList(TagDto tag)
    {
        Recipe.Tags.Remove(tag);
    }

    async Task SubmitRecipe()
    {
        if (Recipe.Ingridients.Count != 0 && Recipe.Tags.Count != 0)
        {      
            await OnValidSubmit.InvokeAsync();
        }
        else if (Recipe.Ingridients.Count == 0)
        {
            errorMessageIngrList = "Przepis musi mieć co najmniej jeden składnik!";
        }
        else if (Recipe.Tags.Count == 0)
        {
            errorMessageIngrList = "Przepis musi mieć co najmniej jeden tag!";
        }
    }
   
}
