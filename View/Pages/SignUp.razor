@page "/signup"
@inject UserService UserServ

<div id="signup-page">
    <div class="content">
        <div class="header">
            <h3 class="title">Rejestracja konta</h3>
        </div>
        <EditForm Model="@user" OnValidSubmit="@CreateUser">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="user.Email" Label="Adres e-mail" For="@(() => user.Email)"></MudTextField>
            <div id="firstname">
                <MudTextField @bind-Value="user.FirstName" Label="Imię" For="@(() => user.FirstName)"></MudTextField>
            </div>
            <div id="lastname">
                <MudTextField @bind-Value="user.LastName" Label="Nazwisko" For="@(() => user.LastName)"></MudTextField>
            </div>
            <div style="clear: both;"></div>
            <MudTextField @bind-Value="user.Username" Label="Nazwa użytkownika" For="@(() => user.Username)"></MudTextField>
            <MudTextField @bind-Value="user.Password" Label="Hasło" For="@(() => user.Password)" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestClick" AdornmentAriaLabel="Show Password" />
            <div class="modal-footer">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="btn1">Zarejestruj się</MudButton>
            </div>
        </EditForm>
    </div>
</div>

<style>
    #signup-page {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .content {
        width: 70%;
    }

    h3 {
        margin: 0;
        padding: 0;
        font-weight: bolder;
    }

    .btn1 {
        background: rgba( 22, 166, 185 );
        font-size: 1.17em;
        color: white;
    }

        .btn1:hover {
            background: rgba(227, 225, 222);
        }

    .header {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #firstname {
        padding-right: 10px;
    }

    #lastname {
        padding-left: 10px;
    }

    #firstname, #lastname {
        float: left;
        width: 50%;
    }

</style>

@code {
    UserDto user = new();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task CreateUser()
    {
        await UserServ.CreateUserAsync(user);
        user = new();
    }

    void ButtonTestClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}