@page "/mybook/{Message:int}"
@inject NavigationManager NavMan
@inject RecipeService RecServ

@if (userInfo.IsLoggedIn)
{
    @if (Message == 2)
    {
        <div class="alert alert-success" role="alert">
            Przepis został dodany pomyślnie.
        </div>
    }
    @if (Message == 3)
    {
        <div class="alert alert-success" role="alert">
            Przepis został usunięty.
        </div>
    }
    @if (Message == 4)
    {
        <div class="alert alert-success" role="alert">
            Przepis został zaktualizowany.
        </div>
    }

    <div id="top">
        <div id="title">
            <h3 style="font-weight: bold">Moje przepisy</h3>
        </div>
        <div id="buttons">
            <MudButton OnClick="newRecipe" Variant="Variant.Filled" Class="btn-addrecipe">Nowy przepis</MudButton>
        </div>
    </div>

    <div style="clear: both;"></div>

    @if (recipesList == null)
    {
        <h3>Loading...</h3>
    }
    else
    {
        @if (recipesList.Any())
        {
            <div id="recipes">
                @foreach (var recipe in recipesList)
                {
                    <div id="recipe" @onclick="() => navigateToRecipe(recipe.RecipeID)">
                        <div id="description">
                            <h5 style="font-weight: bold">@recipe.Title</h5>
                            <p>
                                <b>Czas przygotowania: </b>@recipe.PrepareTime.TimeOfDay<br />
                                <b>Porcje: </b>@recipe.Portions<br />
                                <b>Trudność: </b>@recipe.Difficulty/5<br />
                            </p>
                        </div>

                    </div>
                }
            </div>
        }
        else
        {
            <p>Brak przepisów do wyświetlenia.</p>

        }
    }
}
else
{
    <p>Nie jesteś zalogowany. Zaloguj się na swoje konto.</p>

    <MudButton Variant="Variant.Filled" Class="btn-login" OnClick="mainLayout.OpenLogin">Zaloguj się</MudButton>
}

<style>
    #top {
        width: auto;
        margin: 10px;
        padding: 5px;
        align-items: center;
        display: flex;
        justify-content: space-between;
    }

    #title {
        flex: 1;
    }

    h3 {
        margin: 0;
        padding: 0;
    }

    #recipe {
        display: flex;
        flex-direction: row;
    }

    #buttons {
        display: flex;
        justify-content: flex-end;
    }

    .btn-addrecipe {
        background: rgba( 22, 166, 185 );
        font-size: 1.17em;
        color: white;
        margin-left: 8px;
    }

    .btn-login {
        background: rgba( 22, 166, 185 );
        font-size: 1.17em;
        color: white;
        margin-top: 10px;
    }

        .btn-addrecipe:hover, .btn-login:hover {
            background-color: rgba(227, 225, 222);
        }

    #recipe:hover {
        background: rgba( 22, 166, 185 );
        cursor: pointer;
        border-radius: 8px;
    }

    #description {
        margin-bottom: 20px;
        margin-top: 20px;
        margin-left: 20px;
        margin-right: 20px;
        height: 100px;
        float: left;
    }
</style>


@code {
    [CascadingParameter]
    public MainLayout mainLayout { get; set; }

    [CascadingParameter]
    public UserInfo? userInfo { get; set; }

    [Parameter]
    public int Message { get; set; }

    private List<RecipeDto>? recipesList;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        recipesList = await RecServ.GetRecipesByUserAsync(userInfo.LoggedUserId);
    }

    //List<RecipeDto> recipes = new();

    void navigateToRecipe(int id)
    {
        NavMan.NavigateTo("/myrecipe/" + id);
    }

    void newRecipe() => NavMan.NavigateTo("/newrecipe");
}
