@page "/newrecipe"
@inject RecipeService RecServ

@*<style>
 .mydiv{
        background-color: white;
    }
</style>*@

<div>
    <EditForm Model="@recipe" OnValidSubmit="@AddRecipe">
        <DataAnnotationsValidator />
        <MudStack Row="true">
            <MudTextField @bind-Value="recipe.Title" Label="Nazwa" For="@(() => recipe.Title)"></MudTextField>
            <MudNumericField @bind-Value="recipe.Portions" Label="Liczba porcji" Step="1" Min="1" For="@(() => recipe.Portions)" />
            <MudTimePicker Label="Czas przygotowania" @bind-Time="recipe.PrepTimeAsTimeSpan" For="@(() => recipe.PrepTimeAsTimeSpan)" />
            <MudSelect T="int" Label="Stopień trudności" AnchorOrigin="Origin.BottomCenter" Min="1" For="@(() => recipe.Difficulty)">
                <MudSelectItem T="int" Value="1" />
                <MudSelectItem T="int" Value="2" />
                <MudSelectItem T="int" Value="3" />
                <MudSelectItem T="int" Value="4" />
                <MudSelectItem T="int" Value="5" />
            </MudSelect>
        </MudStack>
        <p><MudTextField T="string" Label="Opis przygotowania" Text="@recipe.Content" Lines="10" For="@(() => recipe.Content)" /></p>
        <p><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Style="@($"background:{Colors.Cyan.Default}; color:{Colors.Grey.Lighten5};")" EndIcon="@Icons.Material.Filled.ArrowForward" FullWidth="true">Dodaj przepis</MudButton></p>
    </EditForm>
    <MudStack Row="true">
        <EditForm Model="@ingredient" OnValidSubmit="@AddIngredientToList">
            <DataAnnotationsValidator />
            <MudStack Row="true">
                <MudTextField @bind-Value="ingredient.Name" Label="Składnik" For="@(() => ingredient.Name)"></MudTextField>
                <MudTextField @bind-Value="ingredient.Quantity" Label="Ilość" For="@(() => ingredient.Quantity)"></MudTextField>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Style="@($"background:{Colors.Cyan.Default}; color:{Colors.Grey.Lighten5};")" EndIcon="@Icons.Material.Filled.ArrowForward">Dodaj składnik</MudButton>
            </MudStack>
        </EditForm>
        <EditForm Model="@tag" OnValidSubmit="@AddTagToList">
            <DataAnnotationsValidator />
            <MudStack Row="true">
                <MudSelect T="string" Label="Lista tagów" AnchorOrigin="Origin.BottomCenter" OpenIcon="@Icons.Material.Filled.Bookmarks" @bind-Value="tag.Name">
                    @foreach (var item in tags)
                    {
                        <MudSelectItem Value="@item.Name">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Style="@($"background:{Colors.Cyan.Default}; color:{Colors.Grey.Lighten5};")" EndIcon="@Icons.Material.Filled.ArrowForward">Dodaj tag</MudButton>
            </MudStack>
        </EditForm><br />
    </MudStack><br />


    @if (recipe.Ingridients.Count == 0)
    {
        <p>
            Ten przepis nie ma składników
        </p>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Składnik</th>
                    <th>Ilość</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in recipe.Ingridients)
                {
                    <tr>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.Quantity                          
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(() => UpdateIngredientInList(item))">📝</button>
                            <button class="btn btn-danger" @onclick="@(() => DeleteIngredientFromList(item))">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }

@if (recipe.Tags.Count == 0)
    {
        <p>
            Ten przepis nie ma tagów
        </p>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Tag</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in recipe.Tags)
                {
                    <tr>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="@(() => DeleteTagFromList(item))">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
</div>


@code {
    class MyRecipe : RecipeDto
    {
        public TimeSpan? PrepTimeAsTimeSpan
        {
            get => PrepareTime.TimeOfDay;
            set => PrepareTime = new DateTime() + value?? new DateTime();
        }

    }

    MyRecipe recipe = new();
    IngridientDto ingredient = new();
    TagDto tag = new();
    List<TagDto> tags = new();

    TimeSpan DateTimeToTimeSpan(DateTime? ts)
    {
        if (!ts.HasValue) return TimeSpan.Zero;
        else return new TimeSpan(0, ts.Value.Hour, ts.Value.Minute, ts.Value.Second, ts.Value.Millisecond);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        tags = await RecServ.GetTagListAsync();
    }

    void AddIngredientToList()
    {
        recipe.Ingridients.Add(ingredient);
        ingredient = new();
    }

    void AddTagToList()
    {
        bool IsInList = false;
        foreach (var item in recipe.Tags)
        {
            if (item.Name == tag.Name)
            {
                IsInList = true;
            }
        }
        if(!IsInList)
        {
            recipe.Tags.Add(tag);
        }
        tag = new();
    }

    void UpdateIngredientInList(IngridientDto ingredient)
    {
        DeleteIngredientFromList(ingredient);
        this.ingredient = ingredient;
    }

    void DeleteIngredientFromList(IngridientDto ingredient)
    {
        recipe.Ingridients.Remove(ingredient);
    }

    void DeleteTagFromList(TagDto tag)
    {
        recipe.Tags.Remove(tag);
    }

    async Task AddRecipe()
    {
        if(recipe.Ingridients.Count != 0)
        {
            await RecServ.AddRecipeAsync(recipe);
            //await AddIngredients();
            //await AddTags();
            recipe = new();
        }        
    }

    async Task AddIngredients()
    {
        await RecServ.AddIngredientsToRecipeAsync(recipe.Ingridients, recipe.Title);
        recipe.Ingridients = new();
    }

    async Task AddTags()
    {
        //await RecServ.AddRecipeAsync(recipe);
        //recipe = new();
    }
}
