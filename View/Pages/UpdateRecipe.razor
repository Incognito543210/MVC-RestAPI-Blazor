@page "/updaterecipe/{Id:int}"
@inject RecipeService RecServ
@inject NavigationManager NavMan
<h3 style="font-weight: bold">Edytuj przepis</h3>

@if (tags is not null && recipe is not null)
{
    <RecipeForm Recipe="recipe" OnValidSubmit="Update" Tags="tags"/>
}

@code {
    [Parameter]
    public int Id{ get; init; }

    List<TagDto>? tags;
    RecipeAdapter recipe = new();
    //Chcę zgarnąć ten recipe do edycji, wsadzić go do formularza i zmienić treść updaterecipe, żeby się zgadzała :)

    async Task Update()
    {
        //przepis będzie mógł być zmieniony i zapisany do bazy
        //mam sklejony przepis w recipe - jest typu recipeAdapter, po zmianach
        //chcę zapisać przepis do bazy, wywołując metodę putRecipe, putIngredients, putTags
        //zapis przepisu
        await RecServ.UpdateRecipeAsync(recipe, recipe.RecipeID);
        await RecServ.UpdateIngredientsInRecipeAsync(recipe.Ingridients, recipe.RecipeID);
        await RecServ.UpdateTagsInRecipeAsync(recipe.Tags, recipe.RecipeID);
        NavMan.NavigateTo("/mybook");
    }

    protected override async Task OnInitializedAsync()
    {
        tags = await RecServ.GetTagListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        recipe = await GetRecipe(Id);
    }

    async Task<RecipeAdapter> GetRecipe(int id)
    {
        HasIngridientDto hasIngrid = new();
        recipe = await RecServ.GetRecipeAsync(id);
        List<IngridientDto> ingredients = await RecServ.GetIngredientsListAsync(id);
        List<TagDto> tags = await RecServ.GetTagsListAsync(id);
        recipe.Ingridients = ingredients;
        recipe.Tags = tags;
        foreach (var item in recipe.Ingridients)
        {
            hasIngrid = await RecServ.GetIngredientAmountAsync(recipe.RecipeID, item.IngridientID);
            item.Quantity = hasIngrid.Amount;
        }
        return recipe;
    }
}
