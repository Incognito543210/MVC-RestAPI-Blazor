@page "/account/{Message:int}"
@inject UserService UserServ
@inject NavigationManager NavMan

@if(false) //tutaj sprawdzaj czy zalogowany
{
	if(user == null)
	{
		<h3>Ładowanie</h3>
	}
	else
	{
		<div id="top">
			<div id="title">
				<h3 style="font-weight: bold">Moje konto</h3>
			</div>
			<div id="buttons">
				<MudButton Variant="Variant.Filled" Class="btn-edit">Edytuj dane</MudButton>
				<MudButton Variant="Variant.Filled" Class="btn-delete">Usuń konto</MudButton>
			</div>
		</div>

		<div style="clear: both;"></div>

		<div id="description">
			<p>
				<b>Nazwa użytkownika: </b>@user.Username<br />
				<b>Imię i nazwisko: </b>@user.FirstName @user.LastName<br />
				<b>Adres e-mail: </b>@user.Email<br />
			</p>
		</div>

		<MudButton Variant="Variant.Filled" Class="btn-logout" EndIcon="@Icons.Material.Filled.Logout">Wyloguj się</MudButton>
	}	
}
else
{
	@if (Message > 0)
	{
		<div class="alert alert-success" role="alert">
			Rejestracja konta przebiegła pomyślnie. Zaloguj się na swoje konto.
		</div>
	}
	else
	{
		<p>Nie jesteś zalogowany. Zaloguj się na swoje konto.</p>
	}

	<MudButton Variant="Variant.Filled" Class="btn-login" OnClick="mainLayout.OpenLogin">Zaloguj się</MudButton>
}

@*@if (!string.IsNullOrEmpty(mainLayout.GetUserName()))
{
	<h3 class="my-4">Your Account</h3>

	<p>@mainLayout.GetUserName()</p>

	<button type="button" class="btn btn-danger" @onclick="mainLayout.Logout">Logout</button>
}
else
{
	<h3 class="my-4">Please Login</h3>

	<button type="button" class="btn btn-success" @onclick="mainLayout.OpenLogin">Login</button>
}*@

<style>
	.btn-login {
		background: rgba( 22, 166, 185 );
		font-size: 1.17em;
		color: white;
		margin-top: 10px;
	}

	.btn-logout {
		background: red;
		font-size: 1.17em;
		color: white;
		margin-top: 10px;
	}

		.btn-login:hover {
			background: rgba(227, 225, 222);
		}

	#top {
		width: auto;
		margin: 10px;
		padding: 5px;
		align-items: center;
		display: flex;
		justify-content: space-between;
	}

	#title {
		flex: 1;
	}

	#filter {
		display: flex;
		justify-content: flex-end;
	}

	#buttons {
		display: flex;
		justify-content: flex-end;
	}

	.btn-edit, .btn-delete {
		font-size: 1.17em;
		color: white;
		margin-left: 8px;
	}

	.btn-edit {
		background: rgba( 22, 166, 185 );
		margin-right: 5px;
	}

	.btn-delete {
		background: red;
		margin-right: 5px;
	}

		.btn-edit:hover, .btn-delete:hover {
			background-color: rgba(227, 225, 222);
		}

	#description {
		margin-left: 10px;
	}
</style>

@code {
	//private bool isLogged = true;
	//private int loggedUserId = 1;

	[CascadingParameter]
	public MainLayout mainLayout { get; set; }

	[Parameter]
	public int Message { get; set; }

	private UserDto? user;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		//if (isLogged)
		//{
		//	user = await UserServ.GetUserAsync(loggedUserId);
		//}
	}

	void Update()
	{
		if (user is not null)
		{
			NavMan.NavigateTo("/edituser/" + user);
		}
	}

	//async Task Delete()
	//{
	//	if (user is not null)
	//	{
	//		await UserServ.DeleteUserById(user);
	//		NavMan.NavigateTo("/mybook");
	//	}
	//}

	//async Task ConfirmDeletion()
	//{
	//	var options = new DialogOptions { CloseOnEscapeKey = true };
	//	var okno = await DialogService.ShowAsync<ConfirmUserDeletion>("Usuń konto", options);
	//	var wynik = await okno.Result;
	//	if (!wynik.Canceled)
	//	{
	//		await Delete();
	//	}
	//}
}
