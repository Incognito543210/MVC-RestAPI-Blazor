@page "/"
@inject NavigationManager NavMan
@inject RecipeService RecServ
@inject TagService TagServ

@if (recipesList == null || tagsList == null)
{
    <h3>Ładowanie</h3>
}
else
{
    <div id="top">
        <div id="title">
            <h3 style="font-weight: bold">Strona główna</h3>
        </div>
        <div id="filter">
            <MudSelect T="TagDto" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Label="Filtruj przepisy" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" OpenIcon="@Icons.Material.Filled.FilterList" @bind-Value="filter" @bind-SelectedValues="filters">
                @foreach (var item in tagsList)
                {
                    <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div id="button">
            <MudButton OnClick="ApplyFilters" Variant="Variant.Filled" Class="filter-btn">Zastosuj</MudButton>
        </div>
    </div>
    <div id="recipes">
        @if (recipesList.Any())
        {
            @foreach (var recipe in recipesList)
            {
                <div id="recipe" @onclick="() => navigateToRecipe(recipe.RecipeID)">
                    <div id="description">
                        <h5 style="font-weight: bold">@recipe.Title</h5>
                        <p>
                            <b>Czas przygotowania: </b>@recipe.PrepareTime.TimeOfDay<br />
                            <b>Porcje: </b>@recipe.Portions<br />
                            <b>Trudność: </b>@recipe.Difficulty/5<br />
                        </p>
                    </div>

                </div>
            }
        }
        else
        {
            <p style="margin-left: 15px">Brak przepisów do wyświetlenia.</p>
        }

    </div>
}

<style>
    h3 {
        margin: 0;
        padding: 0;
    }

    #top {
        width: auto;
        margin: 10px;
        align-items: center;
        display: flex;
        justify-content: space-between;
    }

    #title {
        flex: 1;
    }

    #filter {
        display: flex;
        justify-content: flex-end;
    }

    #button {
        display: flex;
        justify-content: flex-end;
    }

    .filter-btn {
        background: rgba( 22, 166, 185 );
        font-size: 1.17em;
        color: white;
        margin-left: 8px;
    }

        .filter-btn:hover {
            background: rgba(227, 225, 222);
        }

    #recipe:hover {
        background: rgba( 22, 166, 185 );
        cursor: pointer;
        border-radius: 8px;
    }
    
    #recipe {
        display: flex;
        flex-direction: row;
    }

    #description {
        margin-bottom: 20px;
        margin-top: 20px;
        margin-left: 20px;
        margin-right: 20px;
        height: 100px;
        float: left;
    }
</style>

@code{
    private bool ifTagsSelected = false;

    private List<RecipeDto>? recipesList;
    private List<TagDto>? tagsList;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        recipesList = await RecServ.GetRecipeListAsync();
        tagsList = await TagServ.GetTagsAsync();
    }

    void navigateToRecipe(int id)
    {
        NavMan.NavigateTo("/recipe/" + id);
    }

    private TagDto filter { get; set; }
    private IEnumerable<TagDto> filters { get; set; } = new HashSet<TagDto>();

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (selectedValues.Count == 0)
            return "Wybierz filtry";
        else
            return $"Wybrano: {selectedValues.Count}";

    }

    private async Task ApplyFilters()
    {
        if (filters.Any())
        {
            recipesList = await RecServ.GetRecipesByTagsAsync(filters.ToList());
        }
        else
        {
            recipesList = await RecServ.GetRecipeListAsync();
        }
    }
}